user    nginx;
worker_processes    1;
pid     /var/run/nginx.pid;
daemon  off;

# Send logs to stderr
error_log /dev/stderr warn;

events {
    worker_connections  1024;
}

http {
    server_names_hash_bucket_size 128;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format simple '$remote_addr [$time_local] "$request" $status $body_bytes_sent "$http_referer"';
    access_log /dev/stdout simple;

    server {
      listen 80;
      server_name _; # This is just an invalid value which will never trigger on a real hostname.

      auth_basic "Restricted Content";
      auth_basic_user_file /etc/nginx/.htpasswd;

      location = / {
        rewrite ^ /webui;
      }

      location /webui {
        proxy_pass http://127.0.0.1:5000;
      }

      location /docker {
        proxy_pass http://127.0.0.1:8080;
      }

      location /containers {
        proxy_pass http://127.0.0.1:8080;
      }

      location /api {
        if ($http_referer != "") {
          proxy_pass http://127.0.0.1:8080;
        }
      }

      location /static {
        if ($http_referer != "") {
          proxy_pass http://127.0.0.1:8080;
        }
      }
    }

    server {
      listen 443;
      server_name _; # This is just an invalid value which will never trigger on a real hostname.

      auth_basic "Restricted Content";
      auth_basic_user_file /etc/nginx/.htpasswd;

      ssl_certificate           /etc/nginx/server.crt;
    	ssl_certificate_key       /etc/nginx/server.key;

    	ssl on;
    	ssl_session_cache  builtin:1000  shared:SSL:10m;
    	ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    	ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    	ssl_prefer_server_ciphers on;

      location = / {
        rewrite ^ /webui;
      }

      location /webui {
        proxy_pass http://127.0.0.1:5000;
      }

      location /docker {
        proxy_pass http://127.0.0.1:8080;
      }

      location /containers {
        proxy_pass http://127.0.0.1:8080;
      }

      location /api {
        if ($http_referer != "") {
          proxy_pass http://127.0.0.1:8080;
        }
      }

      location /static {
        if ($http_referer != "") {
          proxy_pass http://127.0.0.1:8080;
        }
      }
    }

    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
      default $http_x_forwarded_proto;
      ''      $scheme;
    }

    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
    # Connection header that may have been passed to this server
    map $http_upgrade $proxy_connection {
      default upgrade;
      '' close;
    }

    # HTTP 1.1 support
    proxy_http_version  1.1;
    proxy_buffering     off;
    proxy_set_header    Host $http_host;
    proxy_set_header    Upgrade $http_upgrade;
    proxy_set_header    Connection $proxy_connection;
    proxy_set_header    X-Real-IP $remote_addr;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto $proxy_x_forwarded_proto;

    # Allow large POSTs
    client_max_body_size 500M;
    # Allow long running scripts
    proxy_read_timeout 600s;

    # Fixes random issues with POST requests
    # See https://github.com/dockerfile/nginx/issues/4#issuecomment-209440995
    client_body_temp_path /tmp 1 2;
    client_body_buffer_size 256k;
    client_body_in_file_only off;

    include /etc/nginx/conf.d/*.conf;
}
